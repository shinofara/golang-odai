// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package route

import (
	"golang-odai/adapter/http/controller/index"
	post2 "golang-odai/adapter/http/controller/post"
	"golang-odai/adapter/http/controller/signin"
	"golang-odai/adapter/http/controller/signup"
	"golang-odai/adapter/http/middleware"
	"golang-odai/adapter/http/render"
	"golang-odai/adapter/http/session"
	"golang-odai/adapter/repository/mysql/authentication"
	"golang-odai/adapter/repository/mysql/post"
	"golang-odai/adapter/repository/mysql/user"
	"golang-odai/external/mysql"
	authentication2 "golang-odai/usecase/interactor/authentication"
	post3 "golang-odai/usecase/interactor/post"
	"golang-odai/usecase/interactor/timeline"
	"net/http"
)

// Injectors from wire.go:

func BuildIndexController(db *mysql.DB, r *render.Config, s *session.Config) *index.Index {
	renderRender := render.New(r)
	repositoryUser := user.New(db)
	repositoryPost := post.New(db, repositoryUser)
	timeLine := timeline.New(repositoryPost, repositoryUser)
	indexIndex := index.New(renderRender, repositoryPost, timeLine)
	return indexIndex
}

func BuildPostController(db *mysql.DB, r *render.Config, s *session.Config) *post2.Post {
	sessionSession := session.New(s)
	renderRender := render.New(r)
	repositoryUser := user.New(db)
	repositoryPost := post.New(db, repositoryUser)
	postPost := post3.New(repositoryPost, repositoryUser)
	post4 := post2.New(sessionSession, renderRender, repositoryPost, postPost)
	return post4
}

func BuildSignupController(db *mysql.DB, r *render.Config, s *session.Config) *signup.Signup {
	renderRender := render.New(r)
	repositoryUser := user.New(db)
	repositoryAuthentication := authentication.New(db)
	authenticationAuthentication := authentication2.New(repositoryUser, repositoryAuthentication)
	signupSignup := signup.New(renderRender, repositoryUser, authenticationAuthentication)
	return signupSignup
}

func BuildSigninController(db *mysql.DB, r *render.Config, s *session.Config) *signin.Sign {
	sessionSession := session.New(s)
	renderRender := render.New(r)
	repositoryUser := user.New(db)
	repositoryAuthentication := authentication.New(db)
	authenticationAuthentication := authentication2.New(repositoryUser, repositoryAuthentication)
	sign := signin.New(sessionSession, renderRender, authenticationAuthentication)
	return sign
}

func BuildAuthenticationMiddleware(s *session.Config) func(http.Handler) http.Handler {
	sessionSession := session.New(s)
	v := middleware.AuthenticationMiddleware(sessionSession)
	return v
}
